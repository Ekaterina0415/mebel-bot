import os
import telebot
import pandas as pd
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '7543140470:AAHAn7LEJPXrN457kK3CcfohP6Us9YE9Aao'
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"https://mebel-bot.onrender.com{WEBHOOK_PATH}"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ Excel ===
excel = pd.ExcelFile("–ú–µ–±–µ–ª—å (1).xlsx")
sheets = {str(name).strip(): excel.parse(name) for name in excel.sheet_names}
AVAILABLE_ROOMS = list(sheets.keys())

ICON_MAP = {
    "–∫—Ä–æ–≤–∞—Ç—å": "üõèÔ∏è", "–º–∞—Ç—Ä–∞—Å": "üß≥", "–æ–∫–Ω–æ": "ü™ü", "–±–∞–ª–∫–æ–Ω": "üö™", "–¥–≤–µ—Ä—å": "üö™",
    "–≥–∞—Ä–Ω–∏—Ç—É—Ä": "üçΩÔ∏è", "—à–∫–∞—Ñ—á–∏–∫": "üóÑÔ∏è", "—Å—Ç–æ–ª": "ü™ë", "—Å—Ç—É–ª": "üí∫", "–≤–∞–Ω–Ω–∞": "üõÅ",
    "—Ä–∞–∫–æ–≤–∏–Ω–∞": "üö∞", "–∏–∑–≥–æ–ª–æ–≤—å–µ": "üñºÔ∏è", "–¥–∏–≤–∞–Ω": "üõãÔ∏è", "—Ç—É–º–±–∞": "üõå",
    "—Å–µ–π—Ñ": "üîê", "—à–∫–∞—Ñ": "üóÑÔ∏è", "–∑–µ—Ä–∫–∞–ª–æ": "üñºÔ∏è", "–ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫": "ü™û"
}

user_data = {}

def get_room_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(room) for room in AVAILABLE_ROOMS]
    for i in range(0, len(buttons), 3):
        markup.row(*buttons[i:i+3])
    return markup

def get_furniture_types_with_icons(room_key):
    sheet = sheets[room_key]
    if "–ú–µ–±–µ–ª—å" not in sheet.columns:
        return []
    result = []
    for ft in sheet["–ú–µ–±–µ–ª—å"].dropna().unique():
        icon = next((emoji for key, emoji in ICON_MAP.items() if key in ft.lower()), "ü™ë")
        result.append((f"{icon} {ft.strip()}", ft.strip()))
    return result

def get_furniture_keyboard(room_key):
    items = get_furniture_types_with_icons(room_key)
    if not items:
        return None
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(icon) for icon, orig in items]
    for i in range(0, len(buttons), 2):
        markup.row(*buttons[i:i+2])
    markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return markup

WELCOME_MESSAGE = (
    "üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–µ–ª—è *¬´–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á–∏–∫¬ª*.\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `–∫—Ä–æ–≤–∞—Ç—å 10` –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:"
)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, WELCOME_MESSAGE, parse_mode="Markdown")
    bot.send_message(message.chat.id, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=get_room_keyboard())

@bot.message_handler(func=lambda m: m.text.strip() in AVAILABLE_ROOMS)
def choose_room(message):
    room_key = message.text.strip()
    user_data[message.chat.id] = {"room": room_key}
    bot.send_message(
        message.chat.id,
        f"üõã –ö–æ–º–Ω–∞—Ç–∞ *{room_key}* –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–±–µ–ª—å:",
        parse_mode="Markdown",
        reply_markup=get_furniture_keyboard(room_key)
    )

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    send_welcome(message)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    text = message.text.lower().strip()
    chat_id = message.chat.id

    parts = text.split()
    if len(parts) == 2:
        item_part, room_key = parts
        room_key = room_key.strip()

        if room_key in sheets:
            df = sheets[room_key]
            found = df[df['–ú–µ–±–µ–ª—å'].astype(str).str.contains(item_part, case=False, na=False)]
            if found.empty:
                bot.send_message(chat_id, f"üîç –í –∫–æ–º–Ω–∞—Ç–µ *{room_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: *{item_part}*", parse_mode="Markdown")
                return

            reply = f"üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç–µ *{room_key}*:\n\n"
            for _, row in found.iterrows():
                name = str(row.get('–ú–µ–±–µ–ª—å', '‚Äì')).strip()
                count = str(row.get('–ö–æ–ª-–≤–æ', '‚Äì')).strip()
                length = str(row.get('–î–ª–∏–Ω–∞', '‚Äì')).strip()
                width = str(row.get('–®–∏—Ä–∏–Ω–∞', '‚Äì')).strip()
                height = str(row.get('–í—ã—Å–æ—Ç–∞', '‚Äì')).strip()

                size = width if "√ó" in width else f"{length}√ó{width}√ó{height}"
                size = size.replace(".0", "")
                icon = next((emoji for key, emoji in ICON_MAP.items() if key in name.lower()), "ü™ë")
                reply += f"{icon} {name} ‚Äî {count} —à—Ç., —Ä–∞–∑–º–µ—Ä: {size}\n"

            bot.send_message(chat_id, reply, parse_mode="Markdown")
            return

    room_key = user_data.get(chat_id, {}).get("room")
    if room_key:
        items = get_furniture_types_with_icons(room_key)
        selected = next((orig for icon, orig in items if icon == message.text or orig == message.text), None)
        if selected:
            df = sheets[room_key]
            found = df[df['–ú–µ–±–µ–ª—å'] == selected]
            reply = f"üì¶ –í –∫–æ–º–Ω–∞—Ç–µ *{room_key}* –Ω–∞–π–¥–µ–Ω–æ:\n\n"
            for _, row in found.iterrows():
                name = str(row.get('–ú–µ–±–µ–ª—å', '‚Äì')).strip()
                count = str(row.get('–ö–æ–ª-–≤–æ', '‚Äì')).strip()
                length = str(row.get('–î–ª–∏–Ω–∞', '‚Äì')).strip()
                width = str(row.get('–®–∏—Ä–∏–Ω–∞', '‚Äì')).strip()
                height = str(row.get('–í—ã—Å–æ—Ç–∞', '‚Äì')).strip()

                size = width if "√ó" in width else f"{length}√ó{width}√ó{height}"
                size = size.replace(".0", "")
                icon = next((emoji for key, emoji in ICON_MAP.items() if key in name.lower()), "ü™ë")
                reply += f"{icon} {name} ‚Äî {count} —à—Ç., —Ä–∞–∑–º–µ—Ä: {size}\n"
            bot.send_message(chat_id, reply, parse_mode="Markdown")
            return

    bot.send_message(chat_id, "‚ùì –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–∫—Ä–æ–≤–∞—Ç—å 10`", parse_mode="Markdown")

# === Flask routes ===
@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "OK", 200

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=port)
