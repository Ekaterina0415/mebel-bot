import telebot
import pandas as pd

from telebot import types

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ ===
excel = pd.ExcelFile("–ú–µ–±–µ–ª—å (1).xlsx")
sheets = {str(name).strip(): excel.parse(name) for name in excel.sheet_names}

# === 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = '7543140470:AAHAn7LEJPXrN457kK3CcfohP6Us9YE9Aao'
bot = telebot.TeleBot(TOKEN)

# === 3. –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_data = {}

# === 4. –ò–∫–æ–Ω–∫–∏ –¥–ª—è –º–µ–±–µ–ª–∏ ===
ICON_MAP = {
    "–∫—Ä–æ–≤–∞—Ç—å": "üõèÔ∏è",
    "–º–∞—Ç—Ä–∞—Å": "üõå",
    "–æ–∫–Ω–æ": "ü™ü",
    "–±–∞–ª–∫–æ–Ω": "üö™",
    "–¥–≤–µ—Ä—å": "üö™",
    "–≥–∞—Ä–Ω–∏—Ç—É—Ä": "üçΩÔ∏è",
    "—à–∫–∞—Ñ—á–∏–∫": "üóÑÔ∏è",
    "—Å—Ç–æ–ª": "ü™ë",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ü™ü –∏–ª–∏ –¥—Ä—É–≥–æ–π, –Ω–æ —ç—Ç–æ—Ç ‚Äî —Å—Ç–æ–ª/—Ç–∞–±—É—Ä–µ—Ç
    "—Å—Ç—É–ª": "üí∫",
    "–≤–∞–Ω–Ω–∞": "üõÅ",
    "—Ä–∞–∫–æ–≤–∏–Ω–∞": "üö∞",
    "–∏–∑–≥–æ–ª–æ–≤—å–µ": "üñºÔ∏è",
    "–¥–∏–≤–∞–Ω": "üõãÔ∏è",
    "—Ç—É–º–±–∞": "üõå",
    "—Å–µ–π—Ñ": "üîê",
    "—à–∫–∞—Ñ": "üóÑÔ∏è",
    "–∑–µ—Ä–∫–∞–ª–æ": "ü™û",
    "–ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫": "ü™ü",
    "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä": "üì∫"
}

# === 5. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
WELCOME_MESSAGE = (
    "üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–µ–ª—è *¬´–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á–∏–∫¬ª*.\n\n"
    "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–±–µ–ª–∏ –≤ –Ω–∞—à–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö.\n"
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –µ—Å—Ç—å –ª–∏ –∫—Ä–æ–≤–∞—Ç—å –≤ –Ω–æ–º–µ—Ä–µ 10 –∏–ª–∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –≤ –Ω–æ–º–µ—Ä–µ 2? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\n\n"
    "üó£ *–∫—Ä–æ–≤–∞—Ç—å 10*\n"
    "üó£ *—Ç–µ–ª–µ–≤–∏–∑–æ—Ä 2*\n\n"
    "üìã –Ø –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ä–∞–∑–º–µ—Ä—ã –∏ –¥–∞–∂–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.\n\n"
    "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üõéÔ∏è"
)

AVAILABLE_ROOMS = list(sheets.keys())

# === 6. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ ===
def get_room_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(room) for room in AVAILABLE_ROOMS]
    for i in range(0, len(buttons), 3):
        markup.row(*buttons[i:i+3])
    return markup

# === 7. –¢–∏–ø—ã –º–µ–±–µ–ª–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ ===
def get_furniture_types_with_icons(room_key):
    sheet = sheets[room_key]
    if "–ú–µ–±–µ–ª—å" not in sheet.columns:
        return []

    furniture_types = sheet["–ú–µ–±–µ–ª—å"].dropna().unique()
    result = []
    for ft in furniture_types:
        icon = "ü™ë"
        for keyword, emoji in ICON_MAP.items():
            if keyword.lower() in ft.lower():
                icon = emoji
                break
        result.append((icon + " " + ft.strip(), ft.strip()))
    return result

# === 8. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –º–µ–±–µ–ª–∏ ===
def get_furniture_keyboard(room_key):
    items = get_furniture_types_with_icons(room_key)
    if not items:
        return None
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(icon_name) for icon_name, _ in items]
    for i in range(0, len(buttons), 2):
        markup.row(*buttons[i:i+2])
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return markup

# === 9. /start –∏ /help ===
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, WELCOME_MESSAGE, parse_mode="Markdown")
    bot.send_message(message.chat.id, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=get_room_keyboard())

# === 10. –í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã ===
@bot.message_handler(func=lambda m: m.text.strip() in AVAILABLE_ROOMS)
def choose_furniture_type(message):
    room_key = message.text.strip()
    user_data[message.chat.id] = {"room": room_key}
    bot.send_message(
        message.chat.id,
        f"üõã –í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ *{room_key}*. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–±–µ–ª–∏:",
        parse_mode="Markdown",
        reply_markup=get_furniture_keyboard(room_key)
    )

# === 11. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ–±–µ–ª–∏ ===
@bot.message_handler(func=lambda m: any(m.text.strip() in [ft[0], ft[1]] for r in sheets for ft in get_furniture_types_with_icons(r)))
def show_furniture_info(message):
    chat_id = message.chat.id
    selected_item = message.text.strip()
    room_key = user_data.get(chat_id, {}).get("room")
    if not room_key or room_key not in sheets:
        bot.send_message(chat_id, "‚ö† –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞.")
        return
    furniture_list = get_furniture_types_with_icons(room_key)
    furniture_name = next((orig for icon, orig in furniture_list if icon == selected_item or orig == selected_item), None)
    if not furniture_name:
        bot.send_message(chat_id, "‚ö† –¢–∏–ø –º–µ–±–µ–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return
    sheet = sheets[room_key]
    found = sheet[sheet["–ú–µ–±–µ–ª—å"] == furniture_name]
    if found.empty:
        bot.send_message(chat_id, f"üîç –í –∫–æ–º–Ω–∞—Ç–µ *{room_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: *{furniture_name}*", parse_mode="Markdown")
        return
    reply = f"üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç–µ *{room_key}*:\n\n"
    for _, row in found.iterrows():
        name = str(row.get("–ú–µ–±–µ–ª—å", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")).strip()
        count = str(row.get("–ö–æ–ª-–≤–æ", "‚Äì")).strip()
        length = str(row.get("–î–ª–∏–Ω–∞", "‚Äì")).strip()
        width = str(row.get("–®–∏—Ä–∏–Ω–∞", "‚Äì")).strip()
        height = str(row.get("–í—ã—Å–æ—Ç–∞", "‚Äì")).strip()
        size = width if "√ó" in width else f"{length}√ó{width}√ó{height}"
        size = size.replace(".0√ó", "√ó").replace(".0", "")
        icon = next((emoji for key, emoji in ICON_MAP.items() if key.lower() in name.lower()), "ü™ë")
        reply += (
            f"{icon} –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —à—Ç.\n"
            f"üìê –†–∞–∑–º–µ—Ä—ã: {size}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    bot.send_message(chat_id, reply, parse_mode="Markdown")

# === 12. –ù–∞–∑–∞–¥ ===
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    send_welcome(message)

# === 13. –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –º–µ–±–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä—É ===
@bot.message_handler(func=lambda m: True)
def handle_query(message):
    text = message.text.lower().strip()
    parts = text.split()
    if len(parts) != 2:
        return
    item_part, room_number = parts
    room_key = str(room_number).strip()
    if room_key not in sheets:
        bot.send_message(message.chat.id, f"üö´ –ö–æ–º–Ω–∞—Ç–∞ *{room_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="Markdown")
        return
    sheet = sheets[room_key]
    if "–ú–µ–±–µ–ª—å" not in sheet.columns:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –í –∫–æ–º–Ω–∞—Ç–µ *{room_key}* –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ '–ú–µ–±–µ–ª—å'", parse_mode="Markdown")
        return
    found = sheet[sheet['–ú–µ–±–µ–ª—å'].astype(str).str.contains(item_part, case=False, na=False)]
    if found.empty:
        bot.send_message(message.chat.id, f"üîç –í –∫–æ–º–Ω–∞—Ç–µ *{room_key}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: *{item_part}*", parse_mode="Markdown")
        return
    reply = f"üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç–µ *{room_key}*:\n\n"
    for _, row in found.iterrows():
        name = str(row.get('–ú–µ–±–µ–ª—å', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')).strip()
        count = str(row.get('–ö–æ–ª-–≤–æ', '‚Äì')).strip()
        length = str(row.get('–î–ª–∏–Ω–∞', '‚Äì')).strip()
        width = str(row.get('–®–∏—Ä–∏–Ω–∞', '‚Äì')).strip()
        height = str(row.get('–í—ã—Å–æ—Ç–∞', '‚Äì')).strip()
        size = width if "√ó" in width else f"{length}√ó{width}√ó{height}"
        size = size.replace(".0√ó", "√ó").replace(".0", "")
        icon = next((emoji for key, emoji in ICON_MAP.items() if key.lower() in name.lower()), "ü™ë")
        reply += (
            f"{icon} –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —à—Ç.\n"
            f"üìê –†–∞–∑–º–µ—Ä—ã: {size}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    bot.send_message(message.chat.id, reply, parse_mode="Markdown")

# === 14. –ó–∞–ø—É—Å–∫ ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)
